.program output
.side_set 2

; sideset 2 - clock
; sideset 1 - CS
; pins - SDO

.wrap_target
    bitloop:
        out pins, 1           side 1 [1]
        in  pins, 1           side 0
        jmp x--   bitloop     side 0
        out pins, 1           side 1
        mov x,    y           side 1     ; Reload bit counter from Y
        in  pins, 1           side 0
        jmp !osre bitloop     side 0     ; Fall-through if TXF empties
    public entry_point:                  ; Must set X,Y to n-2 before starting!
        pull ifempty          side 2 [1] ; Block with CSn high (minimum 2 cycles)
        nop                   side 0 [1] ; CSn back porch
.wrap

% c-sdk {

void output_program_init(PIO pio, uint sm, uint offset, uint pin, float div) 
{
    pio_sm_config c = output_program_get_default_config(offset);

    pio_gpio_init(pio, 3);
    pio_gpio_init(pio, 4);
    pio_gpio_init(pio, 5);
    pio_gpio_init(pio, 6);

    pio_sm_set_consecutive_pindirs(pio, sm, 4, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, 3, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, 5, 1, true);
    pio_sm_set_consecutive_pindirs(pio, sm, 6, 1, true);

    sm_config_set_out_pins(&c, 4, 1);
    sm_config_set_in_pins(&c, 3);
    sm_config_set_sideset_pins(&c, 5);

    sm_config_set_out_shift(&c, false, true, 24);
    sm_config_set_in_shift(&c, false, true, 24);
    
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
}

%}